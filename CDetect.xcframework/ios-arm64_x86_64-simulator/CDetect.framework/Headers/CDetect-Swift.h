#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef CDETECT_SWIFT_H
#define CDETECT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CDetect",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC7CDetect6BPCuff")
@interface BPCuff : NSObject
/// Time the measurement was take (UTS)
@property (nonatomic) NSInteger measurementTime;
/// Most recent battery level as a percentage (0 - 100%)
@property (nonatomic) NSInteger battery;
/// Cuff systolic pressure value take durring measurement
@property (nonatomic) NSInteger systolic;
/// Cuff diastolic pressure value take durring measurement
@property (nonatomic) NSInteger diastolic;
/// Cuff arterial pressure value take durring measurement
@property (nonatomic) NSInteger arterial;
/// Cuff pulse rate value take durring measurement (BPM)
@property (nonatomic) NSInteger pulseRate;
/// Cuff detected irregularitie(s) durring measurement
@property (nonatomic) BOOL irregularPulseDetected;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

SWIFT_CLASS("_TtC7CDetect6Beacon")
@interface Beacon : NSObject
/// Beacon Mac Address
@property (nonatomic, copy) NSString * _Nonnull address;
/// Time beacon was detected
@property (nonatomic) int64_t detectedAt;
/// Current time on the beacon
@property (nonatomic) int64_t currentTime;
/// Beacon Bluetooth RSSI signal strength
@property (nonatomic) NSInteger signalStrength;
/// Local Temperature of the Beacon
@property (nonatomic) float localTemp;
/// Local Humidity of the Beacon
@property (nonatomic) float localHumid;
/// Last known battery level as a percentage
/// <blockquote>
/// The percentage is an estimated repersentation of the remaining power of the AA batteries.
/// Some batteries may have different lifespans, this should only be used as a rough guide to monitor battery level.
///
/// </blockquote>
@property (nonatomic) NSInteger battery;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WeightScale;

SWIFT_CLASS("_TtC7CDetect14CDetectPayload")
@interface CDetectPayload : NSObject
/// Time in seconds when reading was received over BLE
@property (nonatomic) int64_t readingTime;
/// Device time in seconds when reading was generated
@property (nonatomic) NSInteger time;
/// Green counts detected by photodiode 1
@property (nonatomic) NSInteger greenCounter;
/// Green counts detected by photodiode 2
@property (nonatomic) NSInteger greenCounter2;
/// IR Counts TODO add more?
@property (nonatomic) NSInteger irCounter;
/// Red Counts TODO add more?
@property (nonatomic) NSInteger redCounter;
/// Acceleration in the x-axis in units of 0.001g
@property (nonatomic) int16_t accelX;
/// Acceleration in the y-axis in units of 0.001g
@property (nonatomic) int16_t accelY;
/// Acceleration in the z-axis in units of 0.001g
@property (nonatomic) int16_t accelZ;
/// The last calculated battery level of the device as a percentage
@property (nonatomic) NSInteger batteryLevel;
/// The last calculated heart rate in BPM
@property (nonatomic) float heartRate;
/// The last calculated heart rate confidence as a percentage
@property (nonatomic) NSInteger heartRateConfidence;
/// The last calculated R to R peak interval time in ms
@property (nonatomic) float rrInterval;
/// The last calculated R to R peak interval confidence as a percentage
@property (nonatomic) NSInteger rrIntervalConfidence;
/// The last calculated respiration rate in BPM
@property (nonatomic) float respirationRate;
/// The last calculated respiration rate confidence as a percentage
@property (nonatomic) NSInteger respirationRateConfidence;
/// The last calculated SpO2 value as a percentage
@property (nonatomic) float spO2;
/// The last calculated SpO2 R value
@property (nonatomic) float spO2RValue;
/// The last calculated SpO2 confidence as a percentage
@property (nonatomic) NSInteger spO2Confidence;
/// The last calculated skin temperature in °C
@property (nonatomic) float skinTemp;
/// The last calculated core body temperature in °C
@property (nonatomic) float coreBodyTemp;
/// The last calculated core body temperature rate confidence as a percentage
@property (nonatomic) NSInteger coreBodyTempConfidence;
/// Flag that indicates whether the SpO2 signal quality is low or not TODO Check the definitions for flags
@property (nonatomic) BOOL lowSignalQuality;
/// Flag that indicates whether excessive motion has been detected or not
@property (nonatomic) BOOL excessiveMotion;
/// Flag that indicates whether the perfusion index is low or not
@property (nonatomic) BOOL lowPI;
/// Flag that indicates whether the measurement of [spO2RValue] is unreliable or not
@property (nonatomic) BOOL unreliableR;
/// Flag that indicates whether device logging is turned on.
@property (nonatomic) BOOL loggingActive;
/// Flag that indicates the last fall report id
@property (nonatomic) uint8_t fallDetectReportId;
/// Flag that indicates the detected free fall time
@property (nonatomic) uint8_t fallDetectFreefallPeriod;
/// Flag that indicates the detected max mG force observed
@property (nonatomic) int16_t fallDetectMaxmG;
/// Flag that indicates the period of no motion after the fall
@property (nonatomic) uint8_t fallDetectNoMotionPeriod;
/// Red perfusion index
@property (nonatomic) float perfusionIndexRed;
/// Infrared perfustion index
@property (nonatomic) float perfusionIndexInfrared;
/// Resting heart rate
@property (nonatomic) float restingHeartRate;
/// NOTE: Yet to be implemented. Resting respiration rate
@property (nonatomic) float restingRespirationRate;
/// Resting SpO2
@property (nonatomic) float restingSpO2;
/// NOTE: Yet to be implemented. Resting core body temperature
@property (nonatomic) float restingCoreBodyTemp;
/// NOTE: Not yet implemented. Calculated stress level as a percentage
@property (nonatomic) NSInteger stressLevel;
/// Number of running steps done in the current day
@property (nonatomic) NSInteger dailyStepsRun;
/// Number of walking steps done in the current day
@property (nonatomic) NSInteger dailyStepsWalk;
/// Number of total KCals expended in the current day
@property (nonatomic) float dailyKCalsExpended;
/// Number of KCals expended in the current day through activity
@property (nonatomic) float dailyActiveKCalsExpended;
/// NOTE: Yet to be implemented. Closest beacon’s name
@property (nonatomic, copy) NSString * _Nonnull beaconName;
/// NOTE: Yet to be implemented.  Closest beacon’s temperature value
@property (nonatomic) float beaconTemperature;
/// NOTE: Yet to be implemented. Closest beacon’s humidity value
@property (nonatomic) float beaconHumidity;
/// NOTE: Yet to be implemented. Closest beacon’s light level
@property (nonatomic) float beaconLightLevel;
/// NOTE: Yet to be implemented. Closest beacon’s noise level
@property (nonatomic) float beaconNoiseLevel;
/// Calculated heart rate variability using RMSSD
@property (nonatomic) float heartRateVariability;
/// Whether the heart rate variability calculation was done during motion
@property (nonatomic) BOOL heartRateVariabilityMotion;
/// Whether or not the report is of the extended format or not
@property (nonatomic) BOOL isExtendedReport;
/// Most recent Beacon that was communicating with the C-Detect
@property (nonatomic, strong) Beacon * _Nullable beacon;
/// Last known Blood Pressure Cuff reading taken with C-Detect
@property (nonatomic, strong) BPCuff * _Nullable cuff;
/// Last known Weight Scale reading taken with C-Detect
@property (nonatomic, strong) WeightScale * _Nullable scale;
/// Determines wither the CRC8 Check passed for this packet.
/// @suppoerted HOST FW 1.6.2+
@property (nonatomic) BOOL crcValid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;
@class CBPeripheral;

SWIFT_CLASS("_TtC7CDetect17CDetectPeripheral")
@interface CDetectPeripheral : NSObject
@property (nonatomic, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull peripheral;
@property (nonatomic, readonly) BOOL hasPeripheral;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) CDetectPayload * _Nonnull readings;
- (void)setReadingsWithReading:(CDetectPayload * _Nonnull)reading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, DeviceState, open) {
  DeviceStateConnected = 0,
  DeviceStateDisconnected = 1,
  DeviceStateInitialising = 2,
  DeviceStateUnknown = 3,
};

typedef SWIFT_ENUM(NSInteger, DeviceType, open) {
  DeviceTypeCdetect = 0,
};


SWIFT_CLASS("_TtC7CDetect16DiscoveredDevice")
@interface DiscoveredDevice : NSObject
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull peripheral;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull rssistr;
@property (nonatomic, readonly) NSInteger rssi;
@property (nonatomic, readonly, copy) NSString * _Nonnull image;
@property (nonatomic, readonly) BOOL isBonded;
- (void)updateRssiWithNewRssi:(NSInteger)newRssi;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@protocol WaireBluetoothManagerDelegate;
@protocol WaireDeviceDelegate;

/// Service Class for the <code>WaireBluetoothManager</code>.
/// author:
/// Waire Health Ltd
/// version:
/// 2.0.0
/// warning:
/// This class must be instantiated when the waire device is paired.
SWIFT_CLASS("_TtC7CDetect21WaireBluetoothManager")
@interface WaireBluetoothManager : NSObject
/// Waire Bluetooth Service Delegate
/// <ul>
///   <li>
///     Waire Bluetooth Service Delegate, Manages Callbacks associated with the Waire Bluetooth Service Class.
///   </li>
/// </ul>
@property (nonatomic, strong) id <WaireBluetoothManagerDelegate> _Null_unspecified delegate;
/// Waire Device Delegate
/// <ul>
///   <li>
///     Waire Bluetooth Device Delegate, Manages Callbacks associated with the Connected Waire Bluetooth Device.
///   </li>
/// </ul>
@property (nonatomic, strong) id <WaireDeviceDelegate> _Null_unspecified deviceDelegate;
/// Waire Bluetooth Service Is Scanning
/// <ul>
///   <li>
///     Waire Bluetooth Is Scanning, will return a boolean value dependant on the scanning state.
///   </li>
/// </ul>
@property (nonatomic) BOOL isScanning;
/// Waire Bluetooth Service Initialiser
/// <ul>
///   <li>
///     Waire Bluetooth Service is initialised here.
///   </li>
/// </ul>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Starts the Sensor PPG with a defined Frequency in Seconds
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
/// \param freq The frequency at which the sensor updates its readings and returns a binary payload.
///
///
/// returns:
/// Nothing
- (void)startSensorWithFreq:(NSInteger)freq;
/// Restarts the Device
/// important:
/// This method will force the device to reboot, the device will disconnect when this happens.
///
/// returns:
/// Nothing
- (void)restartSensor;
/// Factory Reset the Device
/// important:
/// This method will clear all user data and force the device to reboot, the device will disconnect when this happens. All system configurations will be retained.
///
/// returns:
/// Nothing
- (void)factoryResetSensor;
/// Gets the Sensor Properties (Firmware Versions, Serial Number and Features)
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)getDeviceProperties;
/// Stops the Sensor PPG
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)stopSensor;
/// Sets a Device Configuration Setting
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)setConfigurationWithSetting:(NSString * _Nonnull)setting value:(NSString * _Nonnull)value;
/// Sets multiple Device Configuration Settings
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)setConfigurationsWithSettings:(NSDictionary<NSString *, NSString *> * _Nonnull)settings;
/// Gets a Device Configuration Setting
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)getConfigurationWithSetting:(NSString * _Nonnull)setting;
@end



@class CBCentralManager;
@class NSNumber;

@interface WaireBluetoothManager (SWIFT_EXTENSION(CDetect)) <CBCentralManagerDelegate>
/// Updates the Central CB Manager State
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

@class CBCharacteristic;
@class CBService;

@interface WaireBluetoothManager (SWIFT_EXTENSION(CDetect)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverDescriptorsForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didModifyServices:(NSArray<CBService *> * _Nonnull)invalidatedServices;
@end



@interface WaireBluetoothManager (SWIFT_EXTENSION(CDetect))
- (void)updateHost;
- (void)updateHub;
- (void)updateBle;
@end


@interface WaireBluetoothManager (SWIFT_EXTENSION(CDetect))
/// Gets the current connected device
/// important:
/// This is a GET only value.
///
/// returns:
/// the connected device or nil.
@property (nonatomic, readonly, strong) CDetectPeripheral * _Nullable device;
/// Gets the device’s current status
/// important:
/// This is a GET only value.
///
/// returns:
/// the device status.
@property (nonatomic, readonly) enum DeviceState state;
/// Checks if the service has a connected device
/// important:
/// This is a GET only value.
///
/// returns:
/// boolean result based on if a device is connected or not.
@property (nonatomic, readonly) BOOL deviceIsConnected;
/// Allows the auto connect feature to attempt to connect to last known Waire® device that connected using Bluetooth Low Energy.
/// important:
/// Device must have been paired first to allow it to be classed as a known device.
/// \param allow Toggles auto connect on or off.
///
/// \param attempts The number of times the auto connect handler will attempt a connection to each device that has been found.
///
/// \param attemptInterval The time between connection attempts
///
///
/// returns:
/// nothing
- (void)autoConnectWithAllow:(BOOL)allow attempts:(NSInteger)attempts attemptInterval:(double)attemptInterval;
/// Starts a device discovery session for 30s
/// important:
/// This method requires bluetooth permissions, and the devices bluetooth to be active.
///
/// returns:
/// Nothing
- (void)discoverDevices;
/// Stops a discovery session before the 30s auto stop.
/// important:
/// This method should be called before attempting to connect to a device.
///
/// returns:
/// Nothing
- (void)stopDiscovering;
/// Connects to a selected waire device
/// important:
/// This method requires bluetooth permissions, and the devices bluetooth to be active.
/// \param device A discovered waire peripheral.
///
///
/// returns:
/// Nothing
- (void)connectToDeviceWithDevice:(DiscoveredDevice * _Nonnull)device;
/// Disconnects a paired waire device
/// important:
/// This method requires bluetooth permissions, and the devices bluetooth to be active.
///
/// returns:
/// Nothing
- (void)disconnectFromDevice;
@end


/// Callback Delegate for the <code>WaireBluetoothManager</code>.
/// author:
/// Waire Health Ltd
/// version:
/// 2.0.0
/// warning:
/// This delegate must be instantiated when the waire device is paired.
SWIFT_PROTOCOL("_TtP7CDetect29WaireBluetoothManagerDelegate_")
@protocol WaireBluetoothManagerDelegate
/// Called when a device has been discovered
/// important:
/// This callback will only return supported Waire Health devices only, please check our site for the list of current devices.
/// note:
/// Does not require implementation
/// \param device The discovered device.
///
///
/// returns:
/// Nothing
- (void)onDeviceDiscoveredWithDevice:(DiscoveredDevice * _Nonnull)device;
/// Called when a device has connected.
/// important:
/// When a device connects, before you are finished with it, it is important to use the disconnect function to clear up the services, not doing so can result in unwanted errors.
/// \param device The connected device.
///
///
/// returns:
/// Nothing
- (void)onDeviceConnectedWithDevice:(CDetectPeripheral * _Nonnull)device;
/// Called when a device has failed to connect.
/// \param device The device that failed to connect.
///
/// \param reason The reason for the failure.
///
///
/// returns:
/// Nothing
- (void)onDeviceFailedToConnectWithDevice:(CDetectPeripheral * _Nonnull)device reason:(NSString * _Nonnull)reason;
/// Called when a device has disconnected.
/// important:
/// When a device disconnects, make sure the user has a way of re-connecting to a device, or implement an auto-connect feature.
/// note:
/// Does not require implementation
/// \param device The disconnected device.
///
///
/// returns:
/// Nothing
- (void)onDeviceDisconnectedWithDevice:(CDetectPeripheral * _Nonnull)device;
/// Called when a scan session has completed.
/// important:
/// This will be called automatically after 30s of scanning to reduce power consumption.
/// note:
/// Does not require implementation
///
/// returns:
/// Nothing
- (void)onFinishedScanning;
/// Called when a device encounters an error.
/// note:
/// Does not require implementation
/// \param type The update type.
///
///
/// returns:
/// Nothing
- (void)onDeviceErrorWithDevice:(CDetectPeripheral * _Nonnull)device reason:(NSString * _Nonnull)reason;
@end


/// Callback Delegate for the <code>WaireDeviceManager</code>.
/// author:
/// Waire Health Ltd
/// version:
/// 2.0.0
/// warning:
/// This delegate must be instantiated when the waire device is paired.
SWIFT_PROTOCOL("_TtP7CDetect19WaireDeviceDelegate_")
@protocol WaireDeviceDelegate
/// Called when a device has been set in the device manager service, this is the device that will be used to perform all other device related tasks while connected.
/// important:
/// This callback will only return supported Waire Health devices only, please check our site for the list of current devices.
/// note:
/// Does not require implementation
/// \param device The paired device that was set.
///
///
/// returns:
/// Nothing
- (void)deviceWasSetWithDevice:(CDetectPeripheral * _Nonnull)device;
/// Called when a device state changes
/// important:
/// This callback will only return supported Waire Health devices only, please check our site for the list of current devices.
/// note:
/// Does not require implementation
/// \param device The paired device.
///
/// \param state The device’s updated state.
///
///
/// returns:
/// Nothing
- (void)deviceStateDidChangeWithDevice:(CDetectPeripheral * _Nonnull)device state:(enum DeviceState)state;
/// Called when a device’s readings update via bluetooth notifications.
/// important:
/// This callback will only be called when the <code>StartSensor()</code> command has been called.
/// note:
/// Does not require implementation
/// \param device The paired device.
///
/// \param readings Waire device payload.
///
///
/// returns:
/// Nothing
- (void)readingsDidChangeWithDevice:(CDetectPeripheral * _Nonnull)device readings:(CDetectPayload * _Nonnull)readings;
/// Called when a device configuration is requested via bluetooth.
/// note:
/// Does not require implementation
/// \param config The requested setting.
///
/// \param value The value of the setting.
///
///
/// returns:
/// Nothing
- (void)didGetDeviceConfigurationWithSetting:(NSString * _Nonnull)setting value:(NSString * _Nonnull)value;
/// Called when a device’s configuration was updated via bluetooth successfully.
/// important:
/// This callback will only be called if a configuration was reported back as a success.
/// note:
/// Does not require implementation
/// \param device The paired device.
///
///
/// returns:
/// Nothing
- (void)deviceConfiguredSuccessfullyWithDevice:(CDetectPeripheral * _Nonnull)device configuration:(NSString * _Nonnull)configuration;
/// Called when a device’s configuration failed to updated via bluetooth.
/// important:
/// This callback will only be called if a configuration was reported back as a failure.
/// note:
/// Does not require implementation
/// \param device The paired device.
///
/// \param reason The reason for the failure.
///
///
/// returns:
/// Nothing
- (void)deviceFailedToConfigureWithDevice:(CDetectPeripheral * _Nonnull)device reason:(NSString * _Nonnull)reason;
/// Called when a device’s configuration progress updates.
/// important:
/// This callback will only be called if a configuration update is in progress.
/// note:
/// Does not require implementation
/// \param current The current value of progress.
///
/// \param total The total value of the update.
///
///
/// returns:
/// Nothing
- (void)deviceConfigurationProgressUpdatedWithCurrent:(NSInteger)current total:(NSInteger)total;
@end


SWIFT_CLASS("_TtC7CDetect11WeightScale")
@interface WeightScale : NSObject
@property (nonatomic) NSInteger measurementTime;
@property (nonatomic) NSInteger battery;
@property (nonatomic) double weight;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
#ifndef CDETECT_SWIFT_H
#define CDETECT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CDetect",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC7CDetect6BPCuff")
@interface BPCuff : NSObject
/// Time the measurement was take (UTS)
@property (nonatomic) NSInteger measurementTime;
/// Most recent battery level as a percentage (0 - 100%)
@property (nonatomic) NSInteger battery;
/// Cuff systolic pressure value take durring measurement
@property (nonatomic) NSInteger systolic;
/// Cuff diastolic pressure value take durring measurement
@property (nonatomic) NSInteger diastolic;
/// Cuff arterial pressure value take durring measurement
@property (nonatomic) NSInteger arterial;
/// Cuff pulse rate value take durring measurement (BPM)
@property (nonatomic) NSInteger pulseRate;
/// Cuff detected irregularitie(s) durring measurement
@property (nonatomic) BOOL irregularPulseDetected;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

SWIFT_CLASS("_TtC7CDetect6Beacon")
@interface Beacon : NSObject
/// Beacon Mac Address
@property (nonatomic, copy) NSString * _Nonnull address;
/// Time beacon was detected
@property (nonatomic) int64_t detectedAt;
/// Current time on the beacon
@property (nonatomic) int64_t currentTime;
/// Beacon Bluetooth RSSI signal strength
@property (nonatomic) NSInteger signalStrength;
/// Local Temperature of the Beacon
@property (nonatomic) float localTemp;
/// Local Humidity of the Beacon
@property (nonatomic) float localHumid;
/// Last known battery level as a percentage
/// <blockquote>
/// The percentage is an estimated repersentation of the remaining power of the AA batteries.
/// Some batteries may have different lifespans, this should only be used as a rough guide to monitor battery level.
///
/// </blockquote>
@property (nonatomic) NSInteger battery;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WeightScale;

SWIFT_CLASS("_TtC7CDetect14CDetectPayload")
@interface CDetectPayload : NSObject
/// Time in seconds when reading was received over BLE
@property (nonatomic) int64_t readingTime;
/// Device time in seconds when reading was generated
@property (nonatomic) NSInteger time;
/// Green counts detected by photodiode 1
@property (nonatomic) NSInteger greenCounter;
/// Green counts detected by photodiode 2
@property (nonatomic) NSInteger greenCounter2;
/// IR Counts TODO add more?
@property (nonatomic) NSInteger irCounter;
/// Red Counts TODO add more?
@property (nonatomic) NSInteger redCounter;
/// Acceleration in the x-axis in units of 0.001g
@property (nonatomic) int16_t accelX;
/// Acceleration in the y-axis in units of 0.001g
@property (nonatomic) int16_t accelY;
/// Acceleration in the z-axis in units of 0.001g
@property (nonatomic) int16_t accelZ;
/// The last calculated battery level of the device as a percentage
@property (nonatomic) NSInteger batteryLevel;
/// The last calculated heart rate in BPM
@property (nonatomic) float heartRate;
/// The last calculated heart rate confidence as a percentage
@property (nonatomic) NSInteger heartRateConfidence;
/// The last calculated R to R peak interval time in ms
@property (nonatomic) float rrInterval;
/// The last calculated R to R peak interval confidence as a percentage
@property (nonatomic) NSInteger rrIntervalConfidence;
/// The last calculated respiration rate in BPM
@property (nonatomic) float respirationRate;
/// The last calculated respiration rate confidence as a percentage
@property (nonatomic) NSInteger respirationRateConfidence;
/// The last calculated SpO2 value as a percentage
@property (nonatomic) float spO2;
/// The last calculated SpO2 R value
@property (nonatomic) float spO2RValue;
/// The last calculated SpO2 confidence as a percentage
@property (nonatomic) NSInteger spO2Confidence;
/// The last calculated skin temperature in °C
@property (nonatomic) float skinTemp;
/// The last calculated core body temperature in °C
@property (nonatomic) float coreBodyTemp;
/// The last calculated core body temperature rate confidence as a percentage
@property (nonatomic) NSInteger coreBodyTempConfidence;
/// Flag that indicates whether the SpO2 signal quality is low or not TODO Check the definitions for flags
@property (nonatomic) BOOL lowSignalQuality;
/// Flag that indicates whether excessive motion has been detected or not
@property (nonatomic) BOOL excessiveMotion;
/// Flag that indicates whether the perfusion index is low or not
@property (nonatomic) BOOL lowPI;
/// Flag that indicates whether the measurement of [spO2RValue] is unreliable or not
@property (nonatomic) BOOL unreliableR;
/// Flag that indicates whether device logging is turned on.
@property (nonatomic) BOOL loggingActive;
/// Flag that indicates the last fall report id
@property (nonatomic) uint8_t fallDetectReportId;
/// Flag that indicates the detected free fall time
@property (nonatomic) uint8_t fallDetectFreefallPeriod;
/// Flag that indicates the detected max mG force observed
@property (nonatomic) int16_t fallDetectMaxmG;
/// Flag that indicates the period of no motion after the fall
@property (nonatomic) uint8_t fallDetectNoMotionPeriod;
/// Red perfusion index
@property (nonatomic) float perfusionIndexRed;
/// Infrared perfustion index
@property (nonatomic) float perfusionIndexInfrared;
/// Resting heart rate
@property (nonatomic) float restingHeartRate;
/// NOTE: Yet to be implemented. Resting respiration rate
@property (nonatomic) float restingRespirationRate;
/// Resting SpO2
@property (nonatomic) float restingSpO2;
/// NOTE: Yet to be implemented. Resting core body temperature
@property (nonatomic) float restingCoreBodyTemp;
/// NOTE: Not yet implemented. Calculated stress level as a percentage
@property (nonatomic) NSInteger stressLevel;
/// Number of running steps done in the current day
@property (nonatomic) NSInteger dailyStepsRun;
/// Number of walking steps done in the current day
@property (nonatomic) NSInteger dailyStepsWalk;
/// Number of total KCals expended in the current day
@property (nonatomic) float dailyKCalsExpended;
/// Number of KCals expended in the current day through activity
@property (nonatomic) float dailyActiveKCalsExpended;
/// NOTE: Yet to be implemented. Closest beacon’s name
@property (nonatomic, copy) NSString * _Nonnull beaconName;
/// NOTE: Yet to be implemented.  Closest beacon’s temperature value
@property (nonatomic) float beaconTemperature;
/// NOTE: Yet to be implemented. Closest beacon’s humidity value
@property (nonatomic) float beaconHumidity;
/// NOTE: Yet to be implemented. Closest beacon’s light level
@property (nonatomic) float beaconLightLevel;
/// NOTE: Yet to be implemented. Closest beacon’s noise level
@property (nonatomic) float beaconNoiseLevel;
/// Calculated heart rate variability using RMSSD
@property (nonatomic) float heartRateVariability;
/// Whether the heart rate variability calculation was done during motion
@property (nonatomic) BOOL heartRateVariabilityMotion;
/// Whether or not the report is of the extended format or not
@property (nonatomic) BOOL isExtendedReport;
/// Most recent Beacon that was communicating with the C-Detect
@property (nonatomic, strong) Beacon * _Nullable beacon;
/// Last known Blood Pressure Cuff reading taken with C-Detect
@property (nonatomic, strong) BPCuff * _Nullable cuff;
/// Last known Weight Scale reading taken with C-Detect
@property (nonatomic, strong) WeightScale * _Nullable scale;
/// Determines wither the CRC8 Check passed for this packet.
/// @suppoerted HOST FW 1.6.2+
@property (nonatomic) BOOL crcValid;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;
@class CBPeripheral;

SWIFT_CLASS("_TtC7CDetect17CDetectPeripheral")
@interface CDetectPeripheral : NSObject
@property (nonatomic, copy) NSUUID * _Nonnull id;
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull peripheral;
@property (nonatomic, readonly) BOOL hasPeripheral;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) CDetectPayload * _Nonnull readings;
- (void)setReadingsWithReading:(CDetectPayload * _Nonnull)reading;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, DeviceState, open) {
  DeviceStateConnected = 0,
  DeviceStateDisconnected = 1,
  DeviceStateInitialising = 2,
  DeviceStateUnknown = 3,
};

typedef SWIFT_ENUM(NSInteger, DeviceType, open) {
  DeviceTypeCdetect = 0,
};


SWIFT_CLASS("_TtC7CDetect16DiscoveredDevice")
@interface DiscoveredDevice : NSObject
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull peripheral;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull rssistr;
@property (nonatomic, readonly) NSInteger rssi;
@property (nonatomic, readonly, copy) NSString * _Nonnull image;
@property (nonatomic, readonly) BOOL isBonded;
- (void)updateRssiWithNewRssi:(NSInteger)newRssi;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@protocol WaireBluetoothManagerDelegate;
@protocol WaireDeviceDelegate;

/// Service Class for the <code>WaireBluetoothManager</code>.
/// author:
/// Waire Health Ltd
/// version:
/// 2.0.0
/// warning:
/// This class must be instantiated when the waire device is paired.
SWIFT_CLASS("_TtC7CDetect21WaireBluetoothManager")
@interface WaireBluetoothManager : NSObject
/// Waire Bluetooth Service Delegate
/// <ul>
///   <li>
///     Waire Bluetooth Service Delegate, Manages Callbacks associated with the Waire Bluetooth Service Class.
///   </li>
/// </ul>
@property (nonatomic, strong) id <WaireBluetoothManagerDelegate> _Null_unspecified delegate;
/// Waire Device Delegate
/// <ul>
///   <li>
///     Waire Bluetooth Device Delegate, Manages Callbacks associated with the Connected Waire Bluetooth Device.
///   </li>
/// </ul>
@property (nonatomic, strong) id <WaireDeviceDelegate> _Null_unspecified deviceDelegate;
/// Waire Bluetooth Service Is Scanning
/// <ul>
///   <li>
///     Waire Bluetooth Is Scanning, will return a boolean value dependant on the scanning state.
///   </li>
/// </ul>
@property (nonatomic) BOOL isScanning;
/// Waire Bluetooth Service Initialiser
/// <ul>
///   <li>
///     Waire Bluetooth Service is initialised here.
///   </li>
/// </ul>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Starts the Sensor PPG with a defined Frequency in Seconds
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
/// \param freq The frequency at which the sensor updates its readings and returns a binary payload.
///
///
/// returns:
/// Nothing
- (void)startSensorWithFreq:(NSInteger)freq;
/// Restarts the Device
/// important:
/// This method will force the device to reboot, the device will disconnect when this happens.
///
/// returns:
/// Nothing
- (void)restartSensor;
/// Factory Reset the Device
/// important:
/// This method will clear all user data and force the device to reboot, the device will disconnect when this happens. All system configurations will be retained.
///
/// returns:
/// Nothing
- (void)factoryResetSensor;
/// Gets the Sensor Properties (Firmware Versions, Serial Number and Features)
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)getDeviceProperties;
/// Stops the Sensor PPG
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)stopSensor;
/// Sets a Device Configuration Setting
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)setConfigurationWithSetting:(NSString * _Nonnull)setting value:(NSString * _Nonnull)value;
/// Sets multiple Device Configuration Settings
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)setConfigurationsWithSettings:(NSDictionary<NSString *, NSString *> * _Nonnull)settings;
/// Gets a Device Configuration Setting
/// important:
/// This method will only work when the sensor has been paired and the notification service has been subscribed to.
///
/// returns:
/// Nothing
- (void)getConfigurationWithSetting:(NSString * _Nonnull)setting;
@end



@class CBCentralManager;
@class NSNumber;

@interface WaireBluetoothManager (SWIFT_EXTENSION(CDetect)) <CBCentralManagerDelegate>
/// Updates the Central CB Manager State
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end

@class CBCharacteristic;
@class CBService;

@interface WaireBluetoothManager (SWIFT_EXTENSION(CDetect)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverDescriptorsForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didModifyServices:(NSArray<CBService *> * _Nonnull)invalidatedServices;
@end



@interface WaireBluetoothManager (SWIFT_EXTENSION(CDetect))
- (void)updateHost;
- (void)updateHub;
- (void)updateBle;
@end


@interface WaireBluetoothManager (SWIFT_EXTENSION(CDetect))
/// Gets the current connected device
/// important:
/// This is a GET only value.
///
/// returns:
/// the connected device or nil.
@property (nonatomic, readonly, strong) CDetectPeripheral * _Nullable device;
/// Gets the device’s current status
/// important:
/// This is a GET only value.
///
/// returns:
/// the device status.
@property (nonatomic, readonly) enum DeviceState state;
/// Checks if the service has a connected device
/// important:
/// This is a GET only value.
///
/// returns:
/// boolean result based on if a device is connected or not.
@property (nonatomic, readonly) BOOL deviceIsConnected;
/// Allows the auto connect feature to attempt to connect to last known Waire® device that connected using Bluetooth Low Energy.
/// important:
/// Device must have been paired first to allow it to be classed as a known device.
/// \param allow Toggles auto connect on or off.
///
/// \param attempts The number of times the auto connect handler will attempt a connection to each device that has been found.
///
/// \param attemptInterval The time between connection attempts
///
///
/// returns:
/// nothing
- (void)autoConnectWithAllow:(BOOL)allow attempts:(NSInteger)attempts attemptInterval:(double)attemptInterval;
/// Starts a device discovery session for 30s
/// important:
/// This method requires bluetooth permissions, and the devices bluetooth to be active.
///
/// returns:
/// Nothing
- (void)discoverDevices;
/// Stops a discovery session before the 30s auto stop.
/// important:
/// This method should be called before attempting to connect to a device.
///
/// returns:
/// Nothing
- (void)stopDiscovering;
/// Connects to a selected waire device
/// important:
/// This method requires bluetooth permissions, and the devices bluetooth to be active.
/// \param device A discovered waire peripheral.
///
///
/// returns:
/// Nothing
- (void)connectToDeviceWithDevice:(DiscoveredDevice * _Nonnull)device;
/// Disconnects a paired waire device
/// important:
/// This method requires bluetooth permissions, and the devices bluetooth to be active.
///
/// returns:
/// Nothing
- (void)disconnectFromDevice;
@end


/// Callback Delegate for the <code>WaireBluetoothManager</code>.
/// author:
/// Waire Health Ltd
/// version:
/// 2.0.0
/// warning:
/// This delegate must be instantiated when the waire device is paired.
SWIFT_PROTOCOL("_TtP7CDetect29WaireBluetoothManagerDelegate_")
@protocol WaireBluetoothManagerDelegate
/// Called when a device has been discovered
/// important:
/// This callback will only return supported Waire Health devices only, please check our site for the list of current devices.
/// note:
/// Does not require implementation
/// \param device The discovered device.
///
///
/// returns:
/// Nothing
- (void)onDeviceDiscoveredWithDevice:(DiscoveredDevice * _Nonnull)device;
/// Called when a device has connected.
/// important:
/// When a device connects, before you are finished with it, it is important to use the disconnect function to clear up the services, not doing so can result in unwanted errors.
/// \param device The connected device.
///
///
/// returns:
/// Nothing
- (void)onDeviceConnectedWithDevice:(CDetectPeripheral * _Nonnull)device;
/// Called when a device has failed to connect.
/// \param device The device that failed to connect.
///
/// \param reason The reason for the failure.
///
///
/// returns:
/// Nothing
- (void)onDeviceFailedToConnectWithDevice:(CDetectPeripheral * _Nonnull)device reason:(NSString * _Nonnull)reason;
/// Called when a device has disconnected.
/// important:
/// When a device disconnects, make sure the user has a way of re-connecting to a device, or implement an auto-connect feature.
/// note:
/// Does not require implementation
/// \param device The disconnected device.
///
///
/// returns:
/// Nothing
- (void)onDeviceDisconnectedWithDevice:(CDetectPeripheral * _Nonnull)device;
/// Called when a scan session has completed.
/// important:
/// This will be called automatically after 30s of scanning to reduce power consumption.
/// note:
/// Does not require implementation
///
/// returns:
/// Nothing
- (void)onFinishedScanning;
/// Called when a device encounters an error.
/// note:
/// Does not require implementation
/// \param type The update type.
///
///
/// returns:
/// Nothing
- (void)onDeviceErrorWithDevice:(CDetectPeripheral * _Nonnull)device reason:(NSString * _Nonnull)reason;
@end


/// Callback Delegate for the <code>WaireDeviceManager</code>.
/// author:
/// Waire Health Ltd
/// version:
/// 2.0.0
/// warning:
/// This delegate must be instantiated when the waire device is paired.
SWIFT_PROTOCOL("_TtP7CDetect19WaireDeviceDelegate_")
@protocol WaireDeviceDelegate
/// Called when a device has been set in the device manager service, this is the device that will be used to perform all other device related tasks while connected.
/// important:
/// This callback will only return supported Waire Health devices only, please check our site for the list of current devices.
/// note:
/// Does not require implementation
/// \param device The paired device that was set.
///
///
/// returns:
/// Nothing
- (void)deviceWasSetWithDevice:(CDetectPeripheral * _Nonnull)device;
/// Called when a device state changes
/// important:
/// This callback will only return supported Waire Health devices only, please check our site for the list of current devices.
/// note:
/// Does not require implementation
/// \param device The paired device.
///
/// \param state The device’s updated state.
///
///
/// returns:
/// Nothing
- (void)deviceStateDidChangeWithDevice:(CDetectPeripheral * _Nonnull)device state:(enum DeviceState)state;
/// Called when a device’s readings update via bluetooth notifications.
/// important:
/// This callback will only be called when the <code>StartSensor()</code> command has been called.
/// note:
/// Does not require implementation
/// \param device The paired device.
///
/// \param readings Waire device payload.
///
///
/// returns:
/// Nothing
- (void)readingsDidChangeWithDevice:(CDetectPeripheral * _Nonnull)device readings:(CDetectPayload * _Nonnull)readings;
/// Called when a device configuration is requested via bluetooth.
/// note:
/// Does not require implementation
/// \param config The requested setting.
///
/// \param value The value of the setting.
///
///
/// returns:
/// Nothing
- (void)didGetDeviceConfigurationWithSetting:(NSString * _Nonnull)setting value:(NSString * _Nonnull)value;
/// Called when a device’s configuration was updated via bluetooth successfully.
/// important:
/// This callback will only be called if a configuration was reported back as a success.
/// note:
/// Does not require implementation
/// \param device The paired device.
///
///
/// returns:
/// Nothing
- (void)deviceConfiguredSuccessfullyWithDevice:(CDetectPeripheral * _Nonnull)device configuration:(NSString * _Nonnull)configuration;
/// Called when a device’s configuration failed to updated via bluetooth.
/// important:
/// This callback will only be called if a configuration was reported back as a failure.
/// note:
/// Does not require implementation
/// \param device The paired device.
///
/// \param reason The reason for the failure.
///
///
/// returns:
/// Nothing
- (void)deviceFailedToConfigureWithDevice:(CDetectPeripheral * _Nonnull)device reason:(NSString * _Nonnull)reason;
/// Called when a device’s configuration progress updates.
/// important:
/// This callback will only be called if a configuration update is in progress.
/// note:
/// Does not require implementation
/// \param current The current value of progress.
///
/// \param total The total value of the update.
///
///
/// returns:
/// Nothing
- (void)deviceConfigurationProgressUpdatedWithCurrent:(NSInteger)current total:(NSInteger)total;
@end


SWIFT_CLASS("_TtC7CDetect11WeightScale")
@interface WeightScale : NSObject
@property (nonatomic) NSInteger measurementTime;
@property (nonatomic) NSInteger battery;
@property (nonatomic) double weight;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
